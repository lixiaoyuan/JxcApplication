<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:local="http://schemas.devexpress.com/winfx/2008/xaml/charts" xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core" xmlns:dxt="http://schemas.devexpress.com/winfx/2008/xaml/charts/themekeys" xmlns:dxdst="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys">
    <!--BEGIN WPF-->
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="{dx:ChartsResource themes/Generic/LegendMarker.xaml}" />
    </ResourceDictionary.MergedDictionaries>
    <!--END WPF-->
    <local:IndicatorGeometryToGeometryConverter x:Key="indicatorGeometryToGeometryConverter" />
    <Style x:Key="IndicatorDefaultStyle" TargetType="local:Indicator">
        <Setter Property="LegendMarkerTemplate" Value="{DynamicResource {dxt:ChartControlThemeKey ResourceKey=IndicatorLegendMarkerDefaultTemplate}}" />
    </Style>
    <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Charts.RegressionLine}" TargetType="local:RegressionLine" BasedOn="{StaticResource IndicatorDefaultStyle}" />
    <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Charts.FibonacciRetracement}" TargetType="local:FibonacciRetracement" BasedOn="{StaticResource IndicatorDefaultStyle}" />
    <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Charts.FibonacciFans}" TargetType="local:FibonacciFans" BasedOn="{StaticResource IndicatorDefaultStyle}" />
    <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Charts.FibonacciArcs}" TargetType="local:FibonacciArcs" BasedOn="{StaticResource IndicatorDefaultStyle}" />
    <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Charts.TrendLine}" TargetType="local:TrendLine" BasedOn="{StaticResource IndicatorDefaultStyle}" />
    <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Charts.SimpleMovingAverage}" TargetType="local:SimpleMovingAverage" BasedOn="{StaticResource IndicatorDefaultStyle}" />
    <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Charts.WeightedMovingAverage}" TargetType="local:WeightedMovingAverage" BasedOn="{StaticResource IndicatorDefaultStyle}" />
    <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Charts.ExponentialMovingAverage}" TargetType="local:ExponentialMovingAverage" BasedOn="{StaticResource IndicatorDefaultStyle}" />
    <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Charts.TriangularMovingAverage}" TargetType="local:TriangularMovingAverage" BasedOn="{StaticResource IndicatorDefaultStyle}" />
    <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Charts.IndicatorPresentation}" TargetType="{x:Type local:IndicatorPresentation}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:IndicatorPresentation}">
                    <!--BEGIN WPF-->
                    <Path x:Name="PART_IndicatorPath" Data="{Binding Path=IndicatorGeometry, Converter={StaticResource indicatorGeometryToGeometryConverter}}" Stroke="{Binding Path=Brush}" StrokeThickness="{Binding Path=ActualLineThickness}" StrokeDashCap="{Binding Path=LineStyle.DashCap}" StrokeLineJoin="{Binding Path=LineStyle.LineJoin}" StrokeMiterLimit="{Binding Path=LineStyle.MiterLimit}" StrokeDashArray="{Binding Path=LineStyle.DashStyle.Dashes}" StrokeDashOffset="{Binding Path=LineStyle.DashStyle.Offset}"></Path>
                    <!--END WPF-->
                    <!--ONLY SL 
                    <Path x:Name = "PART_IndicatorPath"
                        Data="{Binding Path=IndicatorGeometry, Converter={StaticResource indicatorGeometryToGeometryConverter}}"
                        Stroke="{Binding Path=Brush}"
                        StrokeThickness="{Binding Path=ActualLineThickness}"
                        StrokeDashArray="{Binding Path=LineStyle.DashArray, Converter={StaticResource strokeDashArrayConverter}}"
                        StrokeDashOffset="{Binding Path=LineStyle.DashOffset}"
                        StrokeDashCap="{Binding Path=LineStyle.DashCap}"
                        StrokeLineJoin="{Binding Path=LineStyle.LineJoin}"
                        StrokeMiterLimit="{Binding Path=LineStyle.MiterLimit}">
                    </Path>  
                    ONLY SL-->
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Charts.IndicatorLabelPresentation}" TargetType="{x:Type local:IndicatorLabelPresentation}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:IndicatorLabelPresentation}">
                    <!--BEGIN WPF-->
                    <local:ChartContentPresenter Content="{Binding Path=LabelItem.Text, RelativeSource={RelativeSource TemplatedParent}}" ContentTemplate="{Binding Path=Indicator.Item.Label.ElementTemplate,RelativeSource={RelativeSource TemplatedParent}}" TextElement.Foreground="{Binding Path=Indicator.Item.Label.Foreground,  RelativeSource={RelativeSource TemplatedParent}}" TextElement.FontFamily="{Binding Path=Indicator.Item.Label.FontFamily,  RelativeSource={RelativeSource TemplatedParent}}" TextElement.FontSize="{Binding Path=Indicator.Item.Label.FontSize,    RelativeSource={RelativeSource TemplatedParent}}" TextElement.FontStretch="{Binding Path=Indicator.Item.Label.FontStretch, RelativeSource={RelativeSource TemplatedParent}}" TextElement.FontStyle="{Binding Path=Indicator.Item.Label.FontStyle,   RelativeSource={RelativeSource TemplatedParent}}" TextElement.FontWeight="{Binding Path=Indicator.Item.Label.FontWeight,  RelativeSource={RelativeSource TemplatedParent}}" />
                    <!--END WPF-->
                    <!--ONLY SL
                            <local:ChartContentPresenter Content="{Binding Path=LabelItem.Text, RelativeSource={RelativeSource TemplatedParent}}"
                                                         ContentTemplate="{Binding Path=Indicator.Item.Label.ElementTemplate,RelativeSource={RelativeSource TemplatedParent}}"
                                                         Foreground="{Binding Path=Indicator.Item.Label.Foreground,  RelativeSource={RelativeSource TemplatedParent}}"
                                                         FontFamily="{Binding Path=Indicator.Item.Label.FontFamily,  RelativeSource={RelativeSource TemplatedParent}}"
                                                         FontSize="{Binding Path=Indicator.Item.Label.FontSize,    RelativeSource={RelativeSource TemplatedParent}}"
                                                         FontStretch="{Binding Path=Indicator.Item.Label.FontStretch, RelativeSource={RelativeSource TemplatedParent}}"
                                                         FontStyle="{Binding Path=Indicator.Item.Label.FontStyle,   RelativeSource={RelativeSource TemplatedParent}}"
                                                         FontWeight="{Binding Path=Indicator.Item.Label.FontWeight,  RelativeSource={RelativeSource TemplatedParent}}"/>
                            ONLY SL-->
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>