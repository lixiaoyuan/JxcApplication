<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:dxtEx="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys" xmlns:dxet="http://schemas.devexpress.com/winfx/2008/xaml/editors/themekeys" xmlns:dxep="http://schemas.devexpress.com/winfx/2008/xaml/editors" xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core" xmlns:dxt="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys" xmlns:dxe="http://schemas.devexpress.com/winfx/2008/xaml/editors" xmlns:dxei="http://schemas.devexpress.com/winfx/2008/xaml/editors/internal" xmlns:dxeh="http://schemas.devexpress.com/winfx/2008/xaml/editors/internal" xmlns:system="clr-namespace:System;assembly=mscorlib" xmlns:dxdst="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys">

    
    <ResourceDictionary.MergedDictionaries>
        <dxdst:ResourceDictionaryEx Source="/DevExpress.Xpf.Themes.Office2013Ex.v15.2;component/DevExpress.Xpf.Core/DevExpress.Xpf.Core/Editors/Themes/Generic/Common.xaml" />
    </ResourceDictionary.MergedDictionaries>
    

    <dx:StringEmptyToSpaceConverter x:Key="stringToSpaceConverter" />
    <dx:NegationConverter x:Key="negationConverter" />
    
    
    
    

    <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.Internal.ImagePresenter}" TargetType="{x:Type dxei:ImagePresenter}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxei:ImagePresenter}">
                    <Image x:Name="PART_Image" Stretch="None" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{dxet:CustomItemThemeKey ResourceKey=SelectAllItemContainerStyle}" TargetType="{x:Type dxe:ListBoxEditItem}">
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="dx:FocusHelper2.Focusable" Value="True" />
        <Setter Property="IsSelected" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).SelectionViewModel.IsSelected, RelativeSource={RelativeSource Self}, Mode=TwoWay}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxe:ListBoxEditItem}">
                    <dx:DXBorder Background="Transparent">
                        <dxe:SelectAllItemCheckEdit x:Name="checkEdit" Padding="3,0,0,0" dx:FocusHelper2.Focusable="false" dxeh:ControlHelper.IsFocused="{Binding Path=IsKeyboardFocused, RelativeSource={RelativeSource TemplatedParent}}" IsChecked="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).SelectionViewModel.SelectAll, RelativeSource={RelativeSource TemplatedParent}, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" HorizontalContentAlignment="{Binding Path=(dxe:BaseEdit.OwnerEdit).HorizontalContentAlignment, RelativeSource={RelativeSource TemplatedParent}}" VerticalContentAlignment="{Binding Path=(dxe:BaseEdit.OwnerEdit).VerticalContentAlignment, RelativeSource={RelativeSource TemplatedParent}}">
                            <dxe:SelectAllItemCheckEdit.Content>
                                <Binding Path="DisplayText" Converter="{StaticResource stringToSpaceConverter}" />
                            </dxe:SelectAllItemCheckEdit.Content>
                        </dxe:SelectAllItemCheckEdit>
                    </dx:DXBorder>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).ShowBorder, RelativeSource={RelativeSource Self}}" Value="False">
                            <Setter Property="Margin" TargetName="checkEdit" Value="0,0,0,0" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    
    <Style x:Key="{dxet:CustomItemThemeKey ResourceKey=WaitIndicatorItemContainerStyle}" TargetType="{x:Type dxe:ListBoxEditItem}">
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="dx:FocusHelper2.Focusable" Value="True" />
        <Setter Property="IsSelected" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxe:ListBoxEditItem}">
                    <dx:ColumnWaitIndicator />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{dxet:CustomItemThemeKey ResourceKey=DefaultButtonStyle}" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
    </Style>
    <DataTemplate x:Key="{dxet:CustomItemThemeKey ResourceKey=EmptyItemTemplate}">
        <Button Style="{DynamicResource {dxet:CustomItemThemeKey ResourceKey=DefaultButtonStyle}}" Content="{Binding Path=DisplayText}" Command="{Binding Path=Command}" CommandParameter="{Binding Path=Item}">
        </Button>
    </DataTemplate>
    
    <DataTemplate x:Key="{dxet:CustomItemThemeKey ResourceKey=SeparatorTemplate}">
        <Separator />
    </DataTemplate>
    
    <DataTemplate x:Key="{dxet:CustomItemThemeKey ResourceKey=DefaultTemplate}">
        <ContentPresenter Content="{Binding Path=DisplayText, Converter={StaticResource stringToSpaceConverter}}" />
    </DataTemplate>
    
    <Style x:Key="{dxet:EditorListBoxThemeKey ResourceKey=DefaultItemStyle}" TargetType="{x:Type dxe:ListBoxEditItem}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="HorizontalContentAlignment" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).HorizontalContentAlignment, RelativeSource={RelativeSource Self}}" />
        <Setter Property="VerticalContentAlignment" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).VerticalContentAlignment, RelativeSource={RelativeSource Self}}" />
        <Setter Property="Padding" Value="2,0,0,0" />
        <Setter Property="Template" Value="{DynamicResource {dxet:EditorListBoxThemeKey ResourceKey=ItemTemplate}}" />
        
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        
        <Setter Property="dxeh:TextBlockService.EnableTextHighlighting" Value="True" />
    </Style>
    
    
    <Style x:Key="{dxet:EditorListBoxThemeKey ResourceKey=CheckBoxItemStyle}" TargetType="{x:Type dxe:ListBoxEditItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxe:ListBoxEditItem}">
                    <dx:DXBorder Background="Transparent" SnapsToDevicePixels="True">
                        <dxe:CheckEdit x:Name="checkEdit" HorizontalAlignment="Stretch" Padding="3,0,0,0" dx:FocusHelper2.Focusable="False" dxeh:ControlHelper.IsFocused="{Binding Path=IsKeyboardFocused, RelativeSource={RelativeSource TemplatedParent}}" IsHitTestVisible="True" IsChecked="{Binding Path=IsSelected, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}" HorizontalContentAlignment="{Binding Path=(dxe:BaseEdit.OwnerEdit).HorizontalContentAlignment, RelativeSource={RelativeSource TemplatedParent}}" VerticalContentAlignment="{Binding Path=(dxe:BaseEdit.OwnerEdit).VerticalContentAlignment, RelativeSource={RelativeSource TemplatedParent}}">
                            
                            <ContentPresenter />
                            
                            
                        </dxe:CheckEdit>
                    </dx:DXBorder>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).ShowBorder, RelativeSource={RelativeSource Self}}" Value="False">
                            <Setter Property="Margin" TargetName="checkEdit" Value="0,0,0,0" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="dxeh:TextBlockService.EnableTextHighlighting" Value="True" />
    </Style>
    
    
    <ControlTemplate x:Key="{dxet:EditorListBoxThemeKey ResourceKey=CustomItemTemplate}" TargetType="{x:Type dxe:ListBoxEditItem}">
        <dx:DXBorder Background="Transparent" SnapsToDevicePixels="True">
            <dxe:SelectAllItemCheckEdit x:Name="checkEdit" Margin="3,0,3,0" Padding="4,0,0,0" dx:FocusHelper2.Focusable="False" IsHitTestVisible="True" IsChecked="{Binding Path=SelectAll, Mode=TwoWay}" IsThreeState="{Binding Path=IsThreeState, Mode=TwoWay}" HorizontalContentAlignment="{Binding Path=(dxe:BaseEdit.OwnerEdit).HorizontalContentAlignment, RelativeSource={RelativeSource TemplatedParent}}" VerticalContentAlignment="{Binding Path=(dxe:BaseEdit.OwnerEdit).VerticalContentAlignment, RelativeSource={RelativeSource TemplatedParent}}">
                <dxe:CheckEdit.Content>
                    <ContentPresenter />
                </dxe:CheckEdit.Content>
            </dxe:SelectAllItemCheckEdit>
        </dx:DXBorder>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).ShowBorder, RelativeSource={RelativeSource Self}}" Value="False">
                <Setter Property="Margin" TargetName="checkEdit" Value="0,0,0,0" />
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    
    <Style x:Key="{dxet:EditorListBoxThemeKey ResourceKey=RadioButtonItemStyle}" TargetType="{x:Type dxe:ListBoxEditItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxe:ListBoxEditItem}">
                    <dx:DXBorder Background="Transparent" SnapsToDevicePixels="True">
                        
                        <dxe:ListBoxRadioButton Name="radioButton" dx:FocusHelper2.Focusable="False" Foreground="{Binding Path=(dxe:BaseEdit.OwnerEdit).Foreground, RelativeSource={RelativeSource TemplatedParent}}" HorizontalAlignment="Stretch" HorizontalContentAlignment="{Binding Path=(dxe:BaseEdit.OwnerEdit).HorizontalContentAlignment, RelativeSource={RelativeSource TemplatedParent}}" IsChecked="{Binding Path=IsSelected, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}" IsHitTestVisible="True" Margin="3,0,3,0" Padding="0,2,0,2" VerticalContentAlignment="{Binding Path=(dxe:BaseEdit.OwnerEdit).VerticalContentAlignment, RelativeSource={RelativeSource TemplatedParent}}" dxeh:ControlHelper.ShowFocusedState="{Binding Path=IsKeyboardFocused, RelativeSource={RelativeSource TemplatedParent}}">
                            <dxe:ListBoxRadioButton.Content>
                                <ContentPresenter />
                            </dxe:ListBoxRadioButton.Content>
                        </dxe:ListBoxRadioButton>
                        
                        
                    </dx:DXBorder>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).ShowBorder, RelativeSource={RelativeSource Self}}" Value="False">
                            <Setter Property="Margin" TargetName="radioButton" Value="0,0,3,0" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="dxeh:TextBlockService.EnableTextHighlighting" Value="True" />
    </Style>
    
    
    
    <ControlTemplate TargetType="{x:Type ScrollViewer}" x:Key="{dxet:EditorListBoxThemeKey ResourceKey=ScrollViewerTemplate}">
        <Grid x:Name="Grid" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
            <Grid.Resources>
                <dxeh:ScrollContentPresenterMarginCorrector x:Key="ScrollContentPresenterMarginCorrector" />
            </Grid.Resources>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="*" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <ScrollContentPresenter Margin="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ScrollContentPresenterMarginCorrector}}" x:Name="PART_ScrollContentPresenter" Grid.Column="0" Grid.Row="0" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" CanHorizontallyScroll="False" CanVerticallyScroll="False">
                
                <ScrollContentPresenter.CanContentScroll>
                    <Binding Path="CanContentScroll" RelativeSource="{RelativeSource TemplatedParent}" />
                </ScrollContentPresenter.CanContentScroll>
                
            </ScrollContentPresenter>
            <ScrollBar Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Cursor="Arrow" x:Name="PART_VerticalScrollBar" Grid.Column="1" Grid.Row="0" ViewportSize="{TemplateBinding ViewportHeight}" Maximum="{TemplateBinding ScrollableHeight}" Minimum="0" Value="{Binding Path=VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" AutomationProperties.AutomationId="VerticalScrollBar" />
            <ScrollBar Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Cursor="Arrow" x:Name="PART_HorizontalScrollBar" Grid.Column="0" Grid.Row="1" Orientation="Horizontal" ViewportSize="{TemplateBinding ViewportWidth}" Maximum="{TemplateBinding ScrollableWidth}" Minimum="0" Value="{Binding Path=HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" AutomationProperties.AutomationId="HorizontalScrollBar" />
            <dx:DXBorder x:Name="Corner" Grid.Row="1" Grid.Column="1" Style="{DynamicResource {dxt:ScrollBarThemeKey ResourceKey=ScrollingCornerStyle}}" />
        </Grid>
    </ControlTemplate>
    
    
    
    <ControlTemplate x:Key="{dxet:EditorListBoxThemeKey ResourceKey=Template}" TargetType="{x:Type dxep:EditorListBox}">
        <dx:DXBorder x:Name="Bd" Background="{TemplateBinding Background}">
            <Grid>
                <ScrollViewer x:Name="ScrollViewer" Padding="{TemplateBinding Padding}" dx:FocusHelper2.Focusable="False" BorderThickness="0">
                    
                    <ItemsPresenter />
                    
                    <dx:ScrollBarExtensions.AllowMouseScrolling>
                        <system:Boolean>true</system:Boolean>
                    </dx:ScrollBarExtensions.AllowMouseScrolling>
                    
                </ScrollViewer>
                <dx:WaitIndicator DeferedVisibility="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).ShowWaitIndicator, RelativeSource={RelativeSource Self}}" />
            </Grid>
        </dx:DXBorder>
    </ControlTemplate>
    
</ResourceDictionary>