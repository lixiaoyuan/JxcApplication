<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core" xmlns:dxmvvm="http://schemas.devexpress.com/winfx/2008/xaml/mvvm" xmlns:dxmvvmi="http://schemas.devexpress.com/winfx/2008/xaml/mvvm" xmlns:dxcn="http://schemas.devexpress.com/winfx/2008/xaml/core/internal" xmlns:dxt="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys" xmlns:dxb="http://schemas.devexpress.com/winfx/2008/xaml/bars" xmlns:sys="clr-namespace:System;assembly=mscorlib" xmlns:dxdst="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys">

    <Style x:Key="DefaultButtonContainerStyle" TargetType="ItemsControl">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ItemsControl">
                    <ItemsPresenter />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <StackPanel Orientation="Horizontal" />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="WindowButtonDefaultStyle" TargetType="ButtonBase">
        <Setter Property="Width" Value="22" />
        <Setter Property="Height" Value="22" />
        <Setter Property="Focusable" Value="False" />
    </Style>
    <Style x:Key="AeroButtonContainerStyle" BasedOn="{StaticResource DefaultButtonContainerStyle}" TargetType="ItemsControl">
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="Width" Value="{Binding Path=(dx:DXWindow.AeroControlBoxWidth), RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=dx:DXWindow}}" />
        <Setter Property="Height" Value="{Binding Path=(dx:DXWindow.AeroControlBoxHeight), RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=dx:DXWindow}}" />
        <Setter Property="Margin" Value="{Binding Path=(dx:DXWindow.AeroControlBoxMargin), RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=dx:DXWindow}}" />
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=ButtonBase}" TargetType="ButtonBase">
                    <Setter Property="Width" Value="0" />
                    <Setter Property="Height" Value="0" />
                </Style>
            </Setter.Value>
        </Setter>
    </Style>
    
    <ControlTemplate x:Key="DXTabbedWindowTemplate" TargetType="{x:Type dx:DXTabbedWindow}">
        <Grid x:Name="Root_Grid" UseLayoutRounding="True">
            <dx:DXBorder BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                <AdornerDecorator x:Name="PART_WindowAdornerDecorator" ClipToBounds="True">
                    <Grid x:Name="PART_RootContentPresenter">
                        <ContentPresenter x:Name="FloatingContainerBorder" ContentTemplate="{DynamicResource {dxt:DXTabbedWindowThemeKey ResourceKey=BorderTemplate}}" />
                        <Grid x:Name="MainContainer" Style="{DynamicResource {dxt:DXTabbedWindowThemeKey ResourceKey=MainContainerStyle}}">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto">
                                    <RowDefinition.MinHeight>
                                        <MultiBinding>
                                            <MultiBinding.Converter>
                                                <dxcn:DXTabbedWindowHeaderSizeConverter />
                                            </MultiBinding.Converter>
                                            <Binding Path="TabHeaderSize" RelativeSource="{RelativeSource TemplatedParent}" />
                                            <Binding Path="HeaderIndentInNormalState" RelativeSource="{RelativeSource TemplatedParent}" />
                                            <Binding Path="HeaderIndentInMaximizedState" RelativeSource="{RelativeSource TemplatedParent}" />
                                            <Binding Path="WindowState" RelativeSource="{RelativeSource TemplatedParent}" />
                                            <Binding Path="TabbedWindowMode" RelativeSource="{RelativeSource TemplatedParent}" />
                                        </MultiBinding>
                                    </RowDefinition.MinHeight>
                                </RowDefinition>
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>
                            <ContentPresenter x:Name="Header" Grid.RowSpan="2" ContentTemplate="{DynamicResource {dxt:DXTabbedWindowThemeKey ResourceKey=HeaderTemplate}}" />
                            <Thumb x:Name="PART_DragWidget" Grid.RowSpan="2" Template="{DynamicResource {dxt:FloatingContainerThemeKey IsVisibleInBlend=True, ResourceKey=FloatingContainerDragWidgetTemplate}}" />
                            <dx:DXWindowHeader x:Name="PART_Header" Panel.ZIndex="100" IsAeroModeEnabled="False">
                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="*" />
                                        <ColumnDefinition Width="Auto" />
                                    </Grid.ColumnDefinitions>
                                    <dxcn:DXTabbedWindowHeaderDecorator x:Name="HeaderPresented" TabbedWindowMode="{TemplateBinding TabbedWindowMode}">
                                        <dxmvvmi:Interaction.Behaviors>
                                            <dxmvvmi:DependencyPropertyBehavior PropertyName="ActualWidth" EventName="SizeChanged" Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CaptionActualWidth, Mode=OneWayToSource}" />
                                        </dxmvvmi:Interaction.Behaviors>
                                        <ContentPresenter x:Name="PART_CaptionContentPresenter" ContentTemplate="{DynamicResource {dxt:FloatingContainerThemeKey IsVisibleInBlend=True, ResourceKey=FloatingContainerCaptionTemplate}}" Style="{DynamicResource {dxt:DXTabbedWindowThemeKey ResourceKey=CaptionPresenterStyle}}" />
                                    </dxcn:DXTabbedWindowHeaderDecorator>
                                    <Decorator Grid.Column="1">
                                        <dxmvvmi:Interaction.Behaviors>
                                            <dxmvvmi:DependencyPropertyBehavior PropertyName="ActualWidth" EventName="SizeChanged" Binding="{Binding RelativeSource={RelativeSource AncestorType=dx:DXTabbedWindow}, Path=ButtonContainerActualWidth, Mode=OneWayToSource}" />
                                        </dxmvvmi:Interaction.Behaviors>
                                        <ItemsControl x:Name="ButtonContainer" Style="{DynamicResource {dxt:DXTabbedWindowThemeKey ResourceKey=ButtonContainerStyle}}">
                                            <Button x:Name="PART_Minimize" Style="{DynamicResource {dxt:DXTabbedWindowThemeKey ResourceKey=MinimizeButtonStyle}}" Template="{DynamicResource {dxt:FloatingContainerThemeKey ResourceKey=FloatingContainerMinimizeButtonTemplate}}" />
                                            <Button x:Name="PART_Restore" Visibility="{Binding Path=(dx:FloatingContainer.IsMaximized), RelativeSource={RelativeSource TemplatedParent}, Converter={dxmvvm:BooleanToVisibilityConverter Inverse=False}}" Style="{DynamicResource {dxt:DXTabbedWindowThemeKey ResourceKey=RestoreButtonStyle}}" Template="{DynamicResource {dxt:FloatingContainerThemeKey ResourceKey=FloatingContainerRestoreButtonTemplate}}" />
                                            <Button x:Name="PART_Maximize" Visibility="{Binding Path=(dx:FloatingContainer.IsMaximized), RelativeSource={RelativeSource TemplatedParent}, Converter={dxmvvm:BooleanToVisibilityConverter Inverse=True}}" Style="{DynamicResource {dxt:DXTabbedWindowThemeKey ResourceKey=MaximizeButtonStyle}}" Template="{DynamicResource {dxt:FloatingContainerThemeKey ResourceKey=FloatingContainerMaximizeButtonTemplate}}" />
                                            <Button x:Name="PART_CloseButton" Style="{DynamicResource {dxt:DXTabbedWindowThemeKey ResourceKey=CloseButtonStyle}}" Template="{DynamicResource {dxt:FloatingContainerThemeKey ResourceKey=FloatingContainerCloseButtonTemplate}}" />
                                        </ItemsControl>
                                    </Decorator>
                                </Grid>
                            </dx:DXWindowHeader>
                            <dx:DXBorder x:Name="FloatingContainerBodyContainer" Grid.Row="1" Grid.RowSpan="2">
                                <dx:DXBorder.Margin>
                                    <MultiBinding>
                                        <MultiBinding.Converter>
                                            <dxcn:DXTabbedWindowMarginConverter />
                                        </MultiBinding.Converter>
                                        <Binding Path="TabHeaderSize" RelativeSource="{RelativeSource TemplatedParent}" />
                                        <Binding Path="TabbedWindowMode" RelativeSource="{RelativeSource TemplatedParent}" />
                                    </MultiBinding>
                                </dx:DXBorder.Margin>
                                <dx:DXBorder x:Name="FloatingContainerBody" Style="{DynamicResource {dxt:DXTabbedWindowThemeKey ResourceKey=ContentBorderStyle}}">
                                    <Grid>
                                        <ContentPresenter x:Name="PART_ContainerContent" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" DataContext="{TemplateBinding DataContext}" UseLayoutRounding="{TemplateBinding UseLayoutRounding}" />
                                        <Grid x:Name="PART_StatusPanel" Visibility="Collapsed" HorizontalAlignment="Right" VerticalAlignment="Bottom">
                                            <Thumb x:Name="PART_SizeGrip" Cursor="SizeNWSE" Width="16" Height="16" Template="{DynamicResource {dxt:FloatingContainerThemeKey IsVisibleInBlend=True, ResourceKey=FloatingContainerSizeGripTemplate}}" />
                                        </Grid>
                                    </Grid>
                                </dx:DXBorder>
                            </dx:DXBorder>
                        </Grid>
                        <Control x:Name="PART_ResizeFrame" Focusable="False" Template="{DynamicResource {dxt:FloatingContainerThemeKey ResourceKey=FloatingContainerResizeFrame}}" Visibility="{Binding Path=(dx:FloatingContainer.IsMaximized), RelativeSource={RelativeSource TemplatedParent}, Converter={dxmvvm:BooleanToVisibilityConverter Inverse=True}}" />
                    </Grid>
                </AdornerDecorator>
            </dx:DXBorder>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsAeroMode" Value="True">
                <Setter TargetName="FloatingContainerBorder" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="Header" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="PART_Header" Property="IsAeroModeEnabled" Value="True" />
                <Setter TargetName="ButtonContainer" Property="Style" Value="{StaticResource AeroButtonContainerStyle}" />
            </Trigger>
            <Trigger Property="TabbedWindowMode" Value="Compact">
                <Setter TargetName="Header" Property="Grid.Row" Value="1" />
                <Setter TargetName="Header" Property="Grid.RowSpan" Value="1" />
                <Setter TargetName="PART_DragWidget" Property="Grid.Row" Value="1" />
                <Setter TargetName="PART_DragWidget" Property="Grid.RowSpan" Value="1" />
                <Setter TargetName="PART_Header" Property="Grid.Row" Value="1" />
                <Setter TargetName="FloatingContainerBodyContainer" Property="Grid.Row" Value="2" />
                <Setter TargetName="FloatingContainerBodyContainer" Property="Grid.RowSpan" Value="1" />
            </Trigger>
            <DataTrigger Binding="{Binding Path=(dx:FloatingContainer.FloatingContainer).AllowSizing, RelativeSource={RelativeSource Self}}" Value="False">
                <Setter TargetName="PART_ResizeFrame" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="PART_StatusPanel" Property="Visibility" Value="Collapsed" />
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="DXWindowEmptyTemplate" TargetType="{x:Type dx:DXWindow}">
        <Grid x:Name="Root_Grid">
            <dx:DXBorder BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                <AdornerDecorator x:Name="PART_WindowAdornerDecorator" ClipToBounds="True">
                    <ContentPresenter x:Name="PART_RootContentPresenter" ContentTemplate="{TemplateBinding ActualWindowTemplate}">
                        <ContentPresenter.Content>
                            <dx:DXBorder />
                        </ContentPresenter.Content>
                    </ContentPresenter>
                </AdornerDecorator>
            </dx:DXBorder>
        </Grid>
    </ControlTemplate>
    <DataTemplate x:Key="emptyWindowTemplate" />
    <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Core.DXTabbedWindow}" TargetType="{x:Type dx:DXTabbedWindow}">
        <Setter Property="ResizeMode" Value="CanResize" />
        <Setter Property="ResizeBorderThicknessInAeroMode" Value="{DynamicResource {dxt:DXWindowThemeKey ResourceKey=AeroWindowResizeBorderThickness}}" />
        <Setter Property="ResizeBorderThickness" Value="{DynamicResource {dxt:DXWindowThemeKey ResourceKey=ResizeBorderThickness}}" />
        <Setter Property="BorderEffectOffset" Value="{DynamicResource {dxt:DXWindowThemeKey ResourceKey=BorderEffectOffset}}" />
        <Setter Property="BorderEffectActiveColor" Value="{DynamicResource {dxt:DXWindowThemeKey ResourceKey=BorderEffectActiveColor}}" />
        <Setter Property="BorderEffectInactiveColor" Value="{DynamicResource {dxt:DXWindowThemeKey ResourceKey=BorderEffectInactiveColor}}" />
        <Setter Property="BorderEffectLeftMargins" Value="{DynamicResource {dxt:DXWindowThemeKey ResourceKey=BorderEffectLeftMargins}}" />
        <Setter Property="BorderEffectRightMargins" Value="{DynamicResource {dxt:DXWindowThemeKey ResourceKey=BorderEffectRightMargins}}" />
        <Setter Property="BorderEffectTopMargins" Value="{DynamicResource {dxt:DXWindowThemeKey ResourceKey=BorderEffectTopMargins}}" />
        <Setter Property="BorderEffectBottomMargins" Value="{DynamicResource {dxt:DXWindowThemeKey ResourceKey=BorderEffectBottomMargins}}" />
        <Setter Property="AeroBorderSize" Value="{DynamicResource {dxt:DXWindowThemeKey ResourceKey=AeroWindowBorderSize}}" />

        <Setter Property="AeroWindowTemplate" Value="{StaticResource emptyWindowTemplate}" />
        <Setter Property="WindowTemplate" Value="{StaticResource emptyWindowTemplate}" />
        <Setter Property="Template" Value="{StaticResource DXTabbedWindowTemplate}" />
        <Setter Property="HeaderIndentInNormalState" Value="14" />
        <Setter Property="HeaderIndentInMaximizedState" Value="4" />
        <Style.Triggers>
            <Trigger Property="HasContent" Value="False">
                <Setter Property="Template" Value="{StaticResource DXWindowEmptyTemplate}" />
            </Trigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>