//------------------------------------------------------------------------------
// <auto-generated>
//     此代码已从模板生成。
//
//     手动更改此文件可能导致应用程序出现意外的行为。
//     如果重新生成代码，将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

namespace ApplicationDb.Cor
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ApplicationDbEntities : DbContext
    {
        public ApplicationDbEntities()
            : base(ApplicationDb.Cor.Helper.ConnectStringHelper.ConnectString)
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AuthMenuToolButton> AuthMenuToolButton { get; set; }
        public virtual DbSet<AuthRole> AuthRole { get; set; }
        public virtual DbSet<AuthRoleMenu> AuthRoleMenu { get; set; }
        public virtual DbSet<AuthToolButton> AuthToolButton { get; set; }
        public virtual DbSet<AuthUserRole> AuthUserRole { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<SystemUser> SystemUser { get; set; }
        public virtual DbSet<Zhangtao> Zhangtao { get; set; }
        public virtual DbSet<AuthMenu> AuthMenu { get; set; }
    
        public virtual ObjectResult<AuthMenu> GetRoleMenuAndCheckByRoleId(Nullable<System.Guid> roleId, string systemId)
        {
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(System.Guid));
    
            var systemIdParameter = systemId != null ?
                new ObjectParameter("SystemId", systemId) :
                new ObjectParameter("SystemId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AuthMenu>("GetRoleMenuAndCheckByRoleId", roleIdParameter, systemIdParameter);
        }
    
        public virtual ObjectResult<AuthMenu> GetRoleMenuAndCheckByRoleId(Nullable<System.Guid> roleId, string systemId, MergeOption mergeOption)
        {
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(System.Guid));
    
            var systemIdParameter = systemId != null ?
                new ObjectParameter("SystemId", systemId) :
                new ObjectParameter("SystemId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AuthMenu>("GetRoleMenuAndCheckByRoleId", mergeOption, roleIdParameter, systemIdParameter);
        }
    
        public virtual ObjectResult<SystemUser> GetUserAndCheckByRoleId(Nullable<System.Guid> roleId)
        {
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SystemUser>("GetUserAndCheckByRoleId", roleIdParameter);
        }
    
        public virtual ObjectResult<SystemUser> GetUserAndCheckByRoleId(Nullable<System.Guid> roleId, MergeOption mergeOption)
        {
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SystemUser>("GetUserAndCheckByRoleId", mergeOption, roleIdParameter);
        }
    
        public virtual int UpdateRoleUsers(string userIds, Nullable<System.Guid> roleId, Nullable<System.Guid> createUserId, ObjectParameter msg)
        {
            var userIdsParameter = userIds != null ?
                new ObjectParameter("UserIds", userIds) :
                new ObjectParameter("UserIds", typeof(string));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(System.Guid));
    
            var createUserIdParameter = createUserId.HasValue ?
                new ObjectParameter("CreateUserId", createUserId) :
                new ObjectParameter("CreateUserId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateRoleUsers", userIdsParameter, roleIdParameter, createUserIdParameter, msg);
        }
    
        public virtual int UpdateRoleMenu(Nullable<System.Guid> roleId, string menuIds, string systemId, Nullable<System.Guid> createUserId, ObjectParameter msg)
        {
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(System.Guid));
    
            var menuIdsParameter = menuIds != null ?
                new ObjectParameter("MenuIds", menuIds) :
                new ObjectParameter("MenuIds", typeof(string));
    
            var systemIdParameter = systemId != null ?
                new ObjectParameter("SystemId", systemId) :
                new ObjectParameter("SystemId", typeof(string));
    
            var createUserIdParameter = createUserId.HasValue ?
                new ObjectParameter("CreateUserId", createUserId) :
                new ObjectParameter("CreateUserId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateRoleMenu", roleIdParameter, menuIdsParameter, systemIdParameter, createUserIdParameter, msg);
        }
    
        public virtual ObjectResult<AuthToolButton> GetToolButtonAndCheckByMenuIdRoleId(Nullable<System.Guid> menuId, Nullable<System.Guid> roleId, string systemId)
        {
            var menuIdParameter = menuId.HasValue ?
                new ObjectParameter("MenuId", menuId) :
                new ObjectParameter("MenuId", typeof(System.Guid));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(System.Guid));
    
            var systemIdParameter = systemId != null ?
                new ObjectParameter("SystemId", systemId) :
                new ObjectParameter("SystemId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AuthToolButton>("GetToolButtonAndCheckByMenuIdRoleId", menuIdParameter, roleIdParameter, systemIdParameter);
        }
    
        public virtual ObjectResult<AuthToolButton> GetToolButtonAndCheckByMenuIdRoleId(Nullable<System.Guid> menuId, Nullable<System.Guid> roleId, string systemId, MergeOption mergeOption)
        {
            var menuIdParameter = menuId.HasValue ?
                new ObjectParameter("MenuId", menuId) :
                new ObjectParameter("MenuId", typeof(System.Guid));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(System.Guid));
    
            var systemIdParameter = systemId != null ?
                new ObjectParameter("SystemId", systemId) :
                new ObjectParameter("SystemId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AuthToolButton>("GetToolButtonAndCheckByMenuIdRoleId", mergeOption, menuIdParameter, roleIdParameter, systemIdParameter);
        }
    
        public virtual int UpdateRoleMenuToolButton(Nullable<System.Guid> roleId, Nullable<System.Guid> menuId, string systemId, string toolButtonIds, Nullable<System.Guid> createUserId, ObjectParameter msg)
        {
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(System.Guid));
    
            var menuIdParameter = menuId.HasValue ?
                new ObjectParameter("MenuId", menuId) :
                new ObjectParameter("MenuId", typeof(System.Guid));
    
            var systemIdParameter = systemId != null ?
                new ObjectParameter("SystemId", systemId) :
                new ObjectParameter("SystemId", typeof(string));
    
            var toolButtonIdsParameter = toolButtonIds != null ?
                new ObjectParameter("ToolButtonIds", toolButtonIds) :
                new ObjectParameter("ToolButtonIds", typeof(string));
    
            var createUserIdParameter = createUserId.HasValue ?
                new ObjectParameter("CreateUserId", createUserId) :
                new ObjectParameter("CreateUserId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateRoleMenuToolButton", roleIdParameter, menuIdParameter, systemIdParameter, toolButtonIdsParameter, createUserIdParameter, msg);
        }
    
        public virtual ObjectResult<AuthToolButton> GetToolButton(Nullable<System.Guid> userId, Nullable<System.Guid> menuId, string systemId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(System.Guid));
    
            var menuIdParameter = menuId.HasValue ?
                new ObjectParameter("MenuId", menuId) :
                new ObjectParameter("MenuId", typeof(System.Guid));
    
            var systemIdParameter = systemId != null ?
                new ObjectParameter("SystemId", systemId) :
                new ObjectParameter("SystemId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AuthToolButton>("GetToolButton", userIdParameter, menuIdParameter, systemIdParameter);
        }
    
        public virtual ObjectResult<AuthToolButton> GetToolButton(Nullable<System.Guid> userId, Nullable<System.Guid> menuId, string systemId, MergeOption mergeOption)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(System.Guid));
    
            var menuIdParameter = menuId.HasValue ?
                new ObjectParameter("MenuId", menuId) :
                new ObjectParameter("MenuId", typeof(System.Guid));
    
            var systemIdParameter = systemId != null ?
                new ObjectParameter("SystemId", systemId) :
                new ObjectParameter("SystemId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AuthToolButton>("GetToolButton", mergeOption, userIdParameter, menuIdParameter, systemIdParameter);
        }
    
        public virtual ObjectResult<AuthMenu> GetUserTile(Nullable<System.Guid> userId, string systemId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(System.Guid));
    
            var systemIdParameter = systemId != null ?
                new ObjectParameter("SystemId", systemId) :
                new ObjectParameter("SystemId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AuthMenu>("GetUserTile", userIdParameter, systemIdParameter);
        }
    
        public virtual ObjectResult<AuthMenu> GetUserTile(Nullable<System.Guid> userId, string systemId, MergeOption mergeOption)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(System.Guid));
    
            var systemIdParameter = systemId != null ?
                new ObjectParameter("SystemId", systemId) :
                new ObjectParameter("SystemId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AuthMenu>("GetUserTile", mergeOption, userIdParameter, systemIdParameter);
        }
    }
}
